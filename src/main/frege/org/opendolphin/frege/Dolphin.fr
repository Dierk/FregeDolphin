module org.opendolphin.frege.Dolphin where

import Data.HashMap
import frege.control.monad.State

data Tag = Value | Label | Enabled | Visible | Editable | Optional
derive Show Tag 

-- we could add RefVal String for foreign keys or selections, which have no base value.
-- this could be used to e.g. check whether a PM of that id actually exists.
data AttributeData = IntVal    Int    Int     -- baseValue value 
                   | BoolVal   Bool   Bool 
                   | StringVal String String
derive Show AttributeData

-- An Attribute may have no data, eg.
-- a selection attribute might not select anything and hence has no value.
type AttributeValue = Maybe AttributeData

data Index = LongIndex Long | StringIndex String
derive Eq Index
derive Show Index

type IndexSet = HashMap Index ()         -- in replacement of an immutable HashSet
type IndexMap = HashMap String IndexSet  -- a multimap from various String keys to indexes 

type Qualifier = Maybe String

--- Get all indexes for a given key from an IndexMap, empty list if Nothing found
indexesOf :: IndexMap -> String -> [Index]
indexesOf multimap key = elements $ multimap.lookup key where
    elements (Just indexSet) = HashMap.keys indexSet
    elements Nothing         = []
    
--- Adding a value under a key that may contain many values (= multimap).
--- Values are unique like in a set but the collection of values is immutable.        
protected addIndex :: String -> Index -> IndexMap -> IndexMap   
protected addIndex key index multimap = multimap.insert key newSet where
    newSet  = setLike $ multimap.lookup key
    setLike (Just indexes) = indexes.insert index ()   
    setLike Nothing        = singleton index ()     
       
protected removeIndex :: String -> Index -> IndexMap -> IndexMap   
protected removeIndex key index multimap = 
    if HashMap.size newSet == 0 
        then multimap.delete key 
        else multimap.insert key newSet where
    newSet  = setLike $ multimap.lookup key
    setLike (Just indexes) = indexes.delete index    
    setLike Nothing        = IndexSet.empty -- todo: think about "key not found" (we silently swallow missing keys atm)    

data Attribute = Attr {
    --id              :: Long, -- unique attribute id, system assigned // probably not needed since stored in table index
    pmId            :: String,
    propertyName    :: String,
    tag             :: Tag,
    value     :: AttributeValue, -- parts that might change // it would be nicer to express that both must have same ctor
    qualifier :: Qualifier -- consistency constraint with (indexesOf dol.attrIdByQualifier)
}
derive Show Attribute

data Dolphin = Dolphin {
    !attrById           :: HashMap Index Attribute, -- the attribute "table", indexed by id
    !attrIdsByQualifier :: IndexMap ,          -- attr id values must be keys in attrById
    !attrIdsByPmId      :: IndexMap ,
    !pmIdsByType        :: IndexMap 
}

-- when removing a pm by id we need to
--  remove all its attributes, which in turn must remove the qualifiers
--  remove it from pmIdsByType ? 
--     no , when we remove by id, we leave the type alone
--        what if we delete the last PM of a given type?
--        what if we deletAllPmsByType?

addAttribute :: Index -> Attribute -> State Dolphin () 
addAttribute idx attr = State.modify update where
    update dol = dol.{
        attrById    <- insert idx attr, 
        attrIdsByPmId <- addIndex attr.pmId idx, 
        attrIdsByQualifier <- registerQualifier idx attr.qualifier
    } 

modifyQualifier :: Index -> Qualifier -> State Dolphin ()
modifyQualifier attrId newQualifier = do
    State.modify $ \dol -> dol.{attrIdsByQualifier <- unregisterOldQualifier attrId (findQualifierByAttrId dol attrId)} -- remove from qualifier index
    State.modify _.{attrById <- adjust _.{qualifier = newQualifier} attrId }          -- set qualifier value in attribute
    State.modify _.{attrIdsByQualifier <- registerQualifier attrId newQualifier}      -- add new qualifier to index
    
protected registerQualifier :: Index -> Qualifier -> IndexMap -> IndexMap
protected registerQualifier attrId (Just qualifier) = addIndex qualifier attrId
protected registerQualifier attrId Nothing = id     
     
protected unregisterOldQualifier :: Index -> Qualifier -> IndexMap -> IndexMap
protected unregisterOldQualifier attrId (Just oldQualifier) = removeIndex oldQualifier attrId 
protected unregisterOldQualifier attrId Nothing = id -- a Nothing is not registered so there is nothing to unregister


attrUpdate :: Index -> (AttributeValue -> AttributeValue) -> State Dolphin ()
attrUpdate attrId update = State.modify _.{attrById <- adjust _.{value <- update} attrId }

setAttribute :: Index -> AttributeValue -> State Dolphin ()
setAttribute attrId newAttributeValue = attrUpdate attrId $ \_ -> newAttributeValue

setValue :: AttributeValue -> AttributeValue -> AttributeValue
setValue (Just (IntVal    oldBase _)) (Just (IntVal    _ newValue)) = Just (IntVal    oldBase newValue)
setValue (Just (BoolVal   oldBase _)) (Just (BoolVal   _ newValue)) = Just (BoolVal   oldBase newValue)
setValue (Just (StringVal oldBase _)) (Just (StringVal _ newValue)) = Just (StringVal oldBase newValue)
setValue Nothing                      (Just (IntVal base newValue)) = Just (IntVal    base    newValue) -- use value as base ?
setValue Nothing                     (Just (BoolVal base newValue)) = Just (BoolVal   base    newValue)
setValue Nothing                   (Just (StringVal base newValue)) = Just (StringVal base    newValue)
setValue _ _ = error $ "cannot set value on non-matching attribute types."

setBaseValue :: AttributeValue -> AttributeValue -> AttributeValue
setBaseValue (Just (IntVal    _ oldValue)) (Just (IntVal    newBase _)) = Just (IntVal    newBase oldValue)
setBaseValue (Just (BoolVal   _ oldValue)) (Just (BoolVal   newBase _)) = Just (BoolVal   newBase oldValue)
setBaseValue (Just (StringVal _ oldValue)) (Just (StringVal newBase _)) = Just (StringVal newBase oldValue)
setBaseValue Nothing                      (Just (IntVal newBase value)) = Just (IntVal    newBase value   ) -- use base as value ?
setBaseValue Nothing                     (Just (BoolVal newBase value)) = Just (BoolVal   newBase value   )
setBaseValue Nothing                   (Just (StringVal newBase value)) = Just (StringVal newBase value   )
setBaseValue _ _ = error "cannot set base value on non-matching attribute types."

modifyValue :: Index -> AttributeValue -> State Dolphin ()
modifyValue attrId newAttributeValue = attrUpdate attrId $ \oldAttributeValue -> setValue oldAttributeValue newAttributeValue
-- update qualified attributes and update listeners (value, dirty) must be done by the caller

modifyBaseValue :: Index -> AttributeValue -> State Dolphin ()
modifyBaseValue attrId newBaseValue = attrUpdate attrId $ \oldBaseValue -> setBaseValue oldBaseValue newBaseValue
-- update qualified attributes and update listeners (baseValue, dirty)  must be done by the caller

addPmByType :: String -> Index -> State Dolphin ()
addPmByType pmType pmId = State.modify _.{pmIdsByType <- addIndex pmType pmId}      
   
findAttrIdsByQualifier :: Dolphin -> String -> [Index]
findAttrIdsByQualifier dol qual = indexesOf dol.attrIdsByQualifier qual 

findAttrsByQualifier :: Dolphin -> String -> [Attribute] 
findAttrsByQualifier dol qual = catMaybes $ map (dol.attrById.lookup) (findAttrIdsByQualifier dol qual) 

-- not quite sure whether we need this
findQualifierByAttrId :: Dolphin -> Index -> Qualifier
findQualifierByAttrId dol attrId = dol.attrById.lookup attrId >>= _.qualifier

with start f = State.execState f start

toLongIndex :: Int -> Index
toLongIndex i = LongIndex $ Int.long i

stringValue :: Index -> String
stringValue (StringIndex s) = s
stringValue other = error "there is no string value for Index: " ++ show other

main _ = do
    -- start with an empty dolphin
    dolphin = Dolphin empty empty empty empty 
    endDolphin = with dolphin do 
        for [0..1000] $ \i -> do 
            -- create PM0 with a thousand qualified attributes
            index = toLongIndex i
            addAttribute index $ Attr "PM0" "name" Value (Just(IntVal i i)) Nothing
            modifyQualifier index (Just ("qual" ++ show i))            
        for [0..9] $ \i -> do
            tenIndex = toLongIndex (i+10)
            addAttribute tenIndex $ Attr "PM1" "name" Value (Just(IntVal i i)) Nothing
            modifyQualifier tenIndex (Just ("qual" ++ show i))
        addPmByType "allType" (StringIndex "PM0")
        addPmByType "allType" (StringIndex "PM1") 
        setAttribute  (toLongIndex 1) $ Just (IntVal 4077 4077)
        -- modifyValue     1 (Just(IntVal undefined 4077)) -- using undefined is bad, fake values would also be bad
        -- modifyBaseValue 1 (Just(IntVal 4077 undefined))
    for [1..2] $ \i -> println $ findAttrsByQualifier endDolphin ("qual" ++ show i)
    for (indexesOf endDolphin.pmIdsByType "allType") $ \pmId -> do
        print $ (show pmId) ++ ": "
        println $ length $ indexesOf endDolphin.attrIdsByPmId (stringValue pmId) 
    println "done"
